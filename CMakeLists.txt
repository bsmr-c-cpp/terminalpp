project(terminalpp)
cmake_minimum_required(VERSION 3.2 FATAL_ERROR)
cmake_policy(VERSION 3.2)

if (POLICY CMP0063)
    cmake_policy(SET CMP0063 NEW) # Allow hidden visibility for static libs
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/Modules")

# Boost is required as we used Boost.Variant, Boost.Optional, and
# Boost.Format.  All of these are header-only libraries, so no subcomponents
# are required.
include(FindBoost)
find_package(Boost 1.29.0 REQUIRED)

# When building shared objects, etc., we only want to export certain
# symbols.  Therefore, we need to generate a header suitable for declaring
# which symbols should be included.
include (GenerateExportHeader)

# Due to the strange requirements for Google Test, it is assumed to have been
# built in the "gtest" directory.  For this, it is required to run the moral
# equivalent of the following script before building Telnet++:
#
#  mkdir gtest
#  cd gtest
#  cmake /usr/src/gtest && make
#  export GTEST_ROOT=$PWD
#  cd ..
find_package(GTest)

# For GTest, it is necessary to link with the appropriate local threading
# library.
find_package(Threads)

add_library(terminalpp
    src/ansi/charset.cpp
    src/ansi/control_sequence.cpp
    src/ansi/mouse.cpp
    src/attribute.cpp
    src/canvas.cpp
    src/canvas_view.cpp
    src/detail/terminal_charset_control.cpp
    src/detail/terminal_control.cpp
    src/detail/terminal_cursor_control.cpp
    src/detail/element_difference.cpp
    src/detail/parser.cpp
    src/detail/well_known_virtual_key.cpp
    src/element.cpp
    src/encoder.cpp
    src/extent.cpp
    src/glyph.cpp
    src/models/default_brush_model.cpp
    src/models/default_container_model.cpp
    src/point.cpp
    src/rectangle.cpp
    src/screen.cpp
    src/string.cpp
    src/string_io.cpp
    src/terminal.cpp
    src/views/brush_view.cpp
    src/views/container_view.cpp
    src/views/default_draw_context.cpp
    src/virtual_key.cpp
)

set_target_properties(terminalpp
    PROPERTIES
        CXX_VISIBILITY_PRESET hidden
        VERSION 1.0
        SOVERSION 1.0
)

target_include_directories(terminalpp
    PUBLIC "${PROJECT_SOURCE_DIR}/include"
)

target_compile_features(terminalpp
    PUBLIC
        cxx_strong_enums
        cxx_relaxed_constexpr
)

generate_export_header(terminalpp
    EXPORT_FILE_NAME
        "${PROJECT_SOURCE_DIR}/include/terminalpp/detail/export.hpp"
)

install(
    TARGETS
        terminalpp
    ARCHIVE DESTINATION
        lib
    LIBRARY DESTINATION
        lib
)

install(
    DIRECTORY
        include/
    DESTINATION
        include
)

if (GTEST_FOUND)
    enable_testing()

    add_executable(terminalpp_tester
        test/brush_view_test.cpp
        test/canvas_test.cpp
        test/canvas_view_test.cpp
        test/colour_test.cpp
        test/container_view_test.cpp
        test/default_brush_model_test.cpp
        test/default_container_model_test.cpp
        test/default_draw_context_test.cpp
        test/default_event_context_test.cpp
        test/default_list_model_test.cpp
        test/element_test.cpp
        test/encoder_test.cpp
        test/expect_sequence.cpp
        test/expect_tokens.cpp
        test/rectangle_test.cpp
        test/screen_test.cpp
        test/string_test.cpp
        test/terminal_cursor_test.cpp
        test/terminal_init_test.cpp
        test/terminal_read_cursor_test.cpp
        test/terminal_read_fkey_test.cpp
        test/terminal_read_test.cpp
        test/terminal_settings_test.cpp
        test/terminal_string_test.cpp
        test/virtual_key_test.cpp
    )

    target_compile_features(terminalpp_tester
        PUBLIC
            cxx_strong_enums
            cxx_relaxed_constexpr)

    target_link_libraries(terminalpp_tester
        terminalpp
        ${GTEST_LIBRARY}
        ${GTEST_MAIN_LIBRARY}
        ${CMAKE_THREAD_LIBS_INIT}
    )

    add_test(terminalpp_test terminalpp_tester)
endif()
